import random

class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]  # Initialize empty board
        self.current_winner = None

    def print_board(self):
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')

    @staticmethod
    def print_board_nums():
        # 0 | 1 | 2 etc (tells us what number corresponds to what box)
        number_board = [[str(i) for i in range(j*3, (j+1)*3)] for j in range(3)]
        for row in number_board:
            print('| ' + ' | '.join(row) + ' |')

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def empty_squares(self):
        return ' ' in self.board

    def num_empty_squares(self):
        return self.board.count(' ')

    def make_move(self, square, letter):
        if self.board[square] == ' ':
            self.board[square] = letter
            if self.winner(square, letter):
                self.current_winner = letter
            return True
        return False

    def winner(self, square, letter):
        # Check row
        row_ind = square // 3
        row = self.board[row_ind*3:(row_ind+1)*3]
        if all([spot == letter for spot in row]):
            return True
        # Check column
        col_ind = square % 3
        column = [self.board[col_ind+i*3] for i in range(3)]
        if all([spot == letter for spot in column]):
            return True
        # Check diagonal
        if square % 2 == 0:
            diagonal1 = [self.board[i] for i in [0, 4, 8]]  # Left diagonal
            if all([spot == letter for spot in diagonal1]):
                return True
            diagonal2 = [self.board[i] for i in [2, 4, 6]]  # Right diagonal
            if all([spot == letter for spot in diagonal2]):
                return True
        return False


def minimax(position, maximizing_player, alpha, beta):
    if position.current_winner:
        return None, 1 if position.current_winner == 'O' else -1, 0  # leaf node

    if not position.empty_squares():
        return None, 0, 0  # leaf node, no winner

    if maximizing_player:
        max_eval = -float('inf')
        best_move = None
        for move in position.available_moves():
            position.make_move(move, 'O')
            _, eval, _ = minimax(position, False, alpha, beta)
            position.board[move] = ' '
            if eval > max_eval:
                max_eval = eval
                best_move = move
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return best_move, max_eval, 0

    else:  # minimizing player
        min_eval = float('inf')
        best_move = None
        for move in position.available_moves():
            position.make_move(move, 'X')
            _, eval, _ = minimax(position, True, alpha, beta)
            position.board[move] = ' '
            if eval < min_eval:
                min_eval = eval
                best_move = move
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return best_move, min_eval, 0


def play_game():
    game = TicTacToe()
    print("Human player is X and AI player is O. Here is the board layout:")
    TicTacToe.print_board_nums()
    print("To make a move, enter a number from 0-8, which corresponds to the position on the board.")

    while game.empty_squares():
        if game.current_winner:
            break

        if game.num_empty_squares() == 9:
            move = random.choice(game.available_moves())  # Random first move
        else:
            move, _, _ = minimax(game, True, -float('inf'), float('inf'))

        game.make_move(move, 'O')

        print(f"Ai made a move to position {move}")
        game.print_board()
        print()

        if game.current_winner:
            break

        human_move = None
        while human_move is None:
            try:
                human_move = int(input("Enter your move (0-8): "))
                if human_move not in game.available_moves():
                    print("That is not a valid move. Try again.")
                    human_move = None
            except ValueError:
                print("That is not a valid move. Try again.")

        game.make_move(human_move, 'X')

        print("You made a move to position", human_move)
        game.print_board()
        print()

    if game.current_winner == 'O':
        print("AI wins!")
    elif game.current_winner == 'X':
        print("You win!")
    else:
        print("It's a tie!")

play_game()
